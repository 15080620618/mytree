


//二叉树的层序遍历 2

int** levelOrderBottom(struct TreeNode* root, int* returnSize, int** returnColumnSizes) {

    int** levelOrder = malloc(sizeof(int*) * 2001);
    *returnColumnSizes = malloc(sizeof(int) * 2001);
    *returnSize = 0;
    if (!root) {
        return levelOrder;
    }

    struct TreeNode** q = malloc(sizeof(struct TreeNode*) * 2001);
    int left = 0, right = 0;
    q[right++] = root;

    while (left < right) {

        int len = right - left;
        int* level = malloc(sizeof(int) * len);
        (*returnColumnSizes)[*returnSize] = len;

        for (int i = 0; i < len; ++i) {
            struct TreeNode* node = q[left++];
            level[i] = node->val;
            if (node->left != NULL) {
                q[right++] = node->left;
            }
            if (node->right != NULL) {
                q[right++] = node->right;
            }
        }
        levelOrder[(*returnSize)++] = level;
    }
    for (int i = 0; 2 * i < *returnSize; ++i) {
        int* tmp1 = levelOrder[i];
        levelOrder[i] = levelOrder[(*returnSize) - i - 1];
        levelOrder[(*returnSize) - i - 1] = tmp1;

        int tmp2 = (*returnColumnSizes)[i];
        (*returnColumnSizes)[i] = (*returnColumnSizes)[(*returnSize) - i - 1];
        (*returnColumnSizes)[(*returnSize) - i - 1] = tmp2;
    }
    return levelOrder;
}


//二叉树的右视图    深度优先

int sz;
int capacity;
int* ans;

void dfs(struct TreeNode* root, int h) {
    if (!root) return;
    if (sz == h) {
        if (sz == capacity) {
            int* new_add = (int*)realloc(ans, sizeof(int) * capacity * 2);
            if (NULL == new_add) exit(-1);
            ans = new_add;
            capacity *= 2;
        }
        ans[sz++] = root->val;
    }
    dfs(root->right, h + 1);
    dfs(root->left, h + 1);
    
}

int* rightSideView(struct TreeNode* root, int* returnSize) {
    sz = 0, capacity = 8;
    ans = (int*)malloc(sizeof(int) * capacity);
    dfs(root, 0);
    *returnSize = sz;
    return ans;
}




//广度优先
#define CAPACITY 100

int* rightSideView(struct TreeNode* root, int* returnSize) {
    struct TreeNode* queue[CAPACITY];
    int front = 0, back = 0, sz = 0, capacity = 8;
    int* ans = (int*)malloc(sizeof(int) * capacity);
    if (NULL == ans) exit(-1);
    if (!root) {
        *returnSize = 0;
        return ans;
    }
    queue[back++] = root;
    while (front != back) {
        struct TreeNode* lastNode = NULL;
        for (int i = (back - front); i; --i) {
            struct TreeNode* cur = queue[front++];
            if (cur->left) queue[back++] = cur->left;
            if (cur->right) queue[back++] = cur->right;
            lastNode = cur;
        }
        if (sz == capacity) {
            int* new_add = (int*)realloc(ans, sizeof(int) * capacity * 2);
            if (NULL == new_add) exit(-1);
            ans = new_add;
            capacity *= 2;
        }
        ans[sz++] = lastNode->val;
    }
    *returnSize = sz;
    return ans;
}















